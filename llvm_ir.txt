declare i32 @getint()
declare void @putint(i32)
declare void @putch(i32)
declare void @putstr(i8*)

@_a = dso_local constant i32 5
@_12 = dso_local constant i32 85
@a = dso_local constant i32 8
@arrayA = dso_local constant [2 x i32] [i32 1, i32 2]
@array_b = dso_local constant [2 x [1 x i32] ] [[1 x i32] [i32 1], [1 x i32] [i32 1]]
@array_c = dso_local global [2 x i32] [i32 1, i32 2]
@array_d = dso_local global [2 x [1 x i32] ] [[1 x i32] [i32 1], [1 x i32] [i32 2]]
@b = dso_local global i32 12
@c_1 = dso_local global i32 0
@d = dso_local global i32 30
define dso_local i32 @func1(i32 %0) {
%2 = alloca i32
store i32 %0, i32* %2
%3 = add i32 0, 1
ret i32 %3

}
define dso_local void @func2() {
ret void

}
define dso_local void @_func1() {
%1 = add i32 0, 10
%2 = alloca i32
store i32 %1, i32* %2
%3 = add i32 0, 12
%4 = alloca i32
store i32 %3, i32* %4
%5 = alloca [2 x [1 x i32] ] 
%6 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 %5
%7 = load i32, i32* %6
%8 = getelementptr [2 x [1 x i32] ] , [2 x [1 x i32] ] *%5, i32 0, i32 0, i32 0
store i32 1, i32* %8
%9 = getelementptr [2 x [1 x i32] ] , [2 x [1 x i32] ] *%5, i32 0, i32 1, i32 0
store i32 1, i32* %9
%10 = add i32 0, 3
%11 = add i32 0, 1
%12 = add i32 0, 20
%13 = mul i32 1, 20
%14 = add i32 0, 2
%15 = sdiv i32 %13, 2
%16 = load i32, i32 * %2
%17 = mul i32 %15, %16
%18 = add i32 3, %17
%19 = alloca i32
store i32 %18, i32* %19
%20 = add i32 0, 121
%21 = alloca i32
store i32 %20, i32* %21
%22 = alloca i32
store i32 0, i32* %22
%23 = load i32, i32 * %2
%24 = load i32, i32 * %2
%25 = mul i32 %23, %24
%26 = load i32, i32 * %2
%27 = add i32 %25, %26
%28 = add i32 0, 0
%29 = getelementptr [2 x i32], [2 x i32]* @arrayA, i32 0, i32 %28
%30 = load i32, i32* %29
%31 = add i32 %27, %30
%32 = alloca i32
store i32 %31, i32* %32
%33 = load i32, i32 * %2
call void @putch(i32 95)
call void @putch(i32 97)
call void @putch(i32 61)
call void @putint(i32 %33)
call void @putch(i32 10)
%34 = load i32, i32 * %19
call void @putch(i32 95)
call void @putch(i32 97)
call void @putch(i32 61)
call void @putint(i32 %34)
call void @putch(i32 10)
%35 = load i32, i32 * %19
%36 = add i32 0, 0
%37 = icmp eq  i32 %35, 0
br i1 %37,  label %38, label %43

38:
%39 = load i32, i32 * %19
%40 = add i32 0, 1
%41 = sub i32 0, 1
%42 = add i32 %39, %41
store i32 %42, i32* %19
br label %45

43:
%44 = add i32 0, 1
store i32 %44, i32* %19
br label %45

45:
br label %46

46:
%47 = load i32, i32 * %19
%48 = add i32 0, 10
%49 = icmp slt  i32 %47, 10
%50 = load i32, i32 * %19
%51 = add i32 0, 0
%52 = icmp sgt  i32 %50, 0
%53 = and i1 %49, %52
br i1 %53,  label %54, label %103

54:
%55 = load i32, i32 * %19
%56 = add i32 0, 1
%57 = add i32 %55, 1
store i32 %57, i32* %19
%58 = load i32, i32 * %19
%59 = add i32 0, 5
%60 = icmp eq  i32 %58, 5
%61 = load i32, i32 * %19
%62 = add i32 0, 6
%63 = icmp eq  i32 %61, 6
%64 = load i32, i32 * %19
%65 = add i32 0, 5
%66 = add i32 0, 1
%67 = mul i32 5, 1
%68 = add i32 0, 5
%69 = srem i32 %67, 5
%70 = icmp ne  i32 %64, %69
%71 = and i1 %63, %70
%72 = load i32, i32 * %19
%73 = add i32 0, 10
%74 = icmp slt  i32 %72, 10
%75 = and i1 %71, %74
%76 = load i32, i32 * %19
%77 = add i32 0, 5
%78 = icmp sgt  i32 %76, 5
%79 = and i1 %75, %78
%80 = load i32, i32 * %19
%81 = add i32 0, 5
%82 = icmp sge  i32 %80, 5
%83 = and i1 %79, %82
%84 = load i32, i32 * %19
%85 = add i32 0, 6
%86 = icmp sle  i32 %84, 6
%87 = and i1 %83, %86
%88 = add i32 0, 1
%89 = add i32 0, 1
%90 = sub i32 1, 1
%91 = icmp ne i32 %90, 0
%92 = and i1 %87, %91
%93 = load i32, i32 * %19
%94 = icmp ne i32 %93, 0
%95 = and i1 %92, %94
%96 = or i1 %60, %95
br i1 %96,  label %97, label %98

97:
br label %103

98:
%99 = load i32, i32 * %19
%100 = add i32 0, 1
%101 = add i32 %99, 1
store i32 %101, i32* %19
br label %102

102:
br label %46


103:
br label %104

104:
%105 = load i32, i32 * %19
%106 = add i32 0, 10
%107 = icmp slt  i32 %105, 10
br i1 %107,  label %108, label %118

108:
%109 = load i32, i32 * %19
%110 = add i32 0, 1
%111 = add i32 %109, 1
store i32 %111, i32* %19
%112 = load i32, i32 * %19
%113 = add i32 0, 5
%114 = icmp eq  i32 %112, 5
br i1 %114,  label %115, label %116

115:
br label %117

116:
br label %117

117:
br label %104


118:
%119 = load i32, i32 * %2
%120 = add i32 0, 1
%121 = add i32 %119, 1
%122 = load i32, i32 * %2
%123 = add i32 0, 2
%124 = srem i32 %122, 2
store i32 %124, i32* %21
ret void

}
define dso_local i32 @main() {
%1 = alloca i32
store i32 0, i32* %1
%2 = call i32 @getint()
store i32 %2, i32* %1
%3 = load i32, i32 * %1
call void @putch(i32 119)
call void @putch(i32 104)
call void @putch(i32 97)
call void @putch(i32 116)
call void @putch(i32 32)
call void @putch(i32 121)
call void @putch(i32 111)
call void @putch(i32 117)
call void @putch(i32 32)
call void @putch(i32 101)
call void @putch(i32 110)
call void @putch(i32 116)
call void @putch(i32 101)
call void @putch(i32 114)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 110)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 115)
call void @putch(i32 58)
call void @putint(i32 %3)
call void @putch(i32 10)
%4 = load i32, i32 * @_a
call void @putch(i32 95)
call void @putch(i32 97)
call void @putch(i32 61)
call void @putint(i32 %4)
call void @putch(i32 10)
%5 = add i32 0, 0
%6 = getelementptr [2 x i32], [2 x i32]* @array_c, i32 0, i32 %5
%7 = load i32, i32* %6
call void @putch(i32 97)
call void @putch(i32 114)
call void @putch(i32 114)
call void @putch(i32 97)
call void @putch(i32 121)
call void @putch(i32 95)
call void @putch(i32 99)
call void @putch(i32 91)
call void @putch(i32 48)
call void @putch(i32 93)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 115)
call void @putch(i32 58)
call void @putint(i32 %7)
call void @putch(i32 10)
%8 = add i32 0, 0
%9 = add i32 0, 0
%10 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 %8, i32 %9
%11 = load i32, i32* %10
call void @putch(i32 97)
call void @putch(i32 114)
call void @putch(i32 114)
call void @putch(i32 97)
call void @putch(i32 121)
call void @putch(i32 95)
call void @putch(i32 100)
call void @putch(i32 91)
call void @putch(i32 48)
call void @putch(i32 93)
call void @putch(i32 91)
call void @putch(i32 48)
call void @putch(i32 93)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 115)
call void @putch(i32 58)
call void @putint(i32 %11)
call void @putch(i32 10)
%12 = add i32 0, 1
%13 = add i32 0, 0
%14 = getelementptr [2 x [1 x i32]], [2 x [1 x i32]]* @array_d, i32 0, i32 %12, i32 %13
%15 = load i32, i32* %14
call void @putch(i32 97)
call void @putch(i32 114)
call void @putch(i32 114)
call void @putch(i32 97)
call void @putch(i32 121)
call void @putch(i32 95)
call void @putch(i32 100)
call void @putch(i32 91)
call void @putch(i32 49)
call void @putch(i32 93)
call void @putch(i32 91)
call void @putch(i32 48)
call void @putch(i32 93)
call void @putch(i32 32)
call void @putch(i32 105)
call void @putch(i32 115)
call void @putch(i32 58)
call void @putint(i32 %15)
call void @putch(i32 10)
call void @_func1()
%16 = add i32 0, 2
%17 = alloca i32
store i32 %16, i32* %17
%18 = alloca i32
store i32 0, i32* %18
br label %19

19:
%20 = load i32, i32 * %17
%21 = load i32, i32 * %1
%22 = icmp slt  i32 %20, %21
br i1 %22,  label %23, label %41

23:
%24 = load i32, i32 * %1
%25 = load i32, i32 * %17
%26 = srem i32 %24, %25
store i32 %26, i32* %18
%27 = load i32, i32 * %18
%28 = add i32 0, 0
%29 = icmp eq  i32 %27, 0
br i1 %29,  label %30, label %35

30:
%31 = load i32, i32 * %1
%32 = load i32, i32 * %17
%33 = sdiv i32 %31, %32
store i32 %33, i32* %1
%34 = load i32, i32 * %17
call void @putint(i32 %34)
call void @putch(i32 32)
br label %39

35:
%36 = load i32, i32 * %17
%37 = add i32 0, 1
%38 = add i32 %36, 1
store i32 %38, i32* %17
br label %39

39:
br label %40

40:
br label %19


41:
%42 = load i32, i32 * %1
call void @putint(i32 %42)
call void @putch(i32 10)
call void @putch(i32 79)
call void @putch(i32 118)
call void @putch(i32 101)
call void @putch(i32 114)
%43 = add i32 0, 0
ret i32 %43

}
