===== AddExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class AddExpNode {
    //AddExp → MulExp | AddExp ('+' | '−') MulExp
    // AddExp → MulExp AddExp'
    // AddExp' ->('+' | '−') MulExp AddExp' | E
    // AddExp → MulExp AddExp' -> MulExp ('+' | '−')  AddExp | MulExp
    // AddExp → MulExp[('+' | '−')  AddExp] 左递归变为右递归!
    // 没有回溯
    public MulExpNode mulExpNode;
    public Token operation;
    public AddExpNode addExpNode;
    public AddExpNode(MulExpNode mulExpNode, Token operation, AddExpNode addExpNode) {
        this.mulExpNode = mulExpNode;
        this.operation = operation;
        this.addExpNode = addExpNode;
    }
    public void print() {
        mulExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.AddExp));
        if (operation != null) {
            IOUtils.write(operation.toString());
            addExpNode.print();
        }
    }
}

===== BlockItemNode.java =====
package node;
public class BlockItemNode {
    // BlockItem → Decl | Stmt
    public  DeclNode declNode;
    public StmtNode stmtNode;
    public BlockItemNode(DeclNode declNode) {
        this.declNode = declNode;
    }
    public BlockItemNode(StmtNode stmtNode) {
        this.stmtNode = stmtNode;
    }
    public void print(){
        if(declNode != null){
            declNode.print();
        }
        else {
            stmtNode.print();
        }
    }
}

===== BlockNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class BlockNode {
    // Block → '{' { BlockItem } '}'
    public Token leftBracket;
    public List<BlockItemNode> blockItemNodes;
    public Token rightBracket;
    public BlockNode(Token leftBracket, List<BlockItemNode> blockItemNodes, Token rightBracket) {
        this.leftBracket = leftBracket;
        this.blockItemNodes = blockItemNodes;
        this.rightBracket = rightBracket;
    }
    public void print(){
        IOUtils.write(leftBracket.toString());
        for(BlockItemNode node : blockItemNodes){
            node.print();
        }
        IOUtils.write(rightBracket.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.Block));
    }
}

===== BTypeNode.java =====
package node;
import token.Token;
import utils.IOUtils;
public class BTypeNode {
    // 基本类型 BType → 'int'
    public Token bTypeToken;
    public BTypeNode(Token bTypeToken) {
        this.bTypeToken = bTypeToken;
    }
    public void print(){
        IOUtils.write(bTypeToken.toString());
    }
}

===== CompUnitNode.java =====
package node;
import frontend.Parser;
import utils.IOUtils;
import java.util.List;
public class CompUnitNode {
    // CompUnit → {Decl} {FuncDef} MainFuncDef
    public List<DeclNode> declNodes;
    public List<FuncDefNode> funcDefNodes;
    public MainFuncDefNode mainFuncDefNode;
    public CompUnitNode(List<DeclNode> declNodes,List<FuncDefNode> funcDefNodes, MainFuncDefNode mainFuncDefNode) {
        this.declNodes =declNodes;
        this.funcDefNodes = funcDefNodes;
        this.mainFuncDefNode = mainFuncDefNode;
    }
    public void print() {
        for (DeclNode declNode : declNodes) {
            declNode.print();
        }
        for (FuncDefNode funcDefNode: funcDefNodes) {
            funcDefNode.print();
        }
        mainFuncDefNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.CompUnit));
    }
}

===== CondNode.java =====
package node;
import frontend.Parser;
import utils.IOUtils;
public class CondNode {
    // Cond -> LOrExp
    public LOrExpNode lOrExpNode;
    public CondNode(LOrExpNode lOrExpNode) {
        this.lOrExpNode = lOrExpNode;
    }
    public LOrExpNode getLOrExpNode() {
        return lOrExpNode;
    }
    public void print() {
        lOrExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.Cond));
    }
}
===== ConstDeclNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class ConstDeclNode {
    // 常量声明 ConstDecl → 'const' BType ConstDef { ',' ConstDef } ';' // 1.花括号内重复0
    //次 2.花括号内重复多次
    public Token constToken;
    public BTypeNode bTypeNode;
    public List<ConstDefNode> constDefNodes;
    public List<Token> commasToken;
    public Token semicnToken;
    public ConstDeclNode(Token constToken, BTypeNode bTypeNode, List<ConstDefNode> constDefNodes, List<Token> commasToken, Token semicnToken) {
        this.constToken = constToken;
        this.bTypeNode = bTypeNode;
        this.constDefNodes = constDefNodes;
        this.commasToken = commasToken;
        this.semicnToken = semicnToken;
    }
    void print(){
        IOUtils.write(constToken.toString());
        bTypeNode.print();
        constDefNodes.get(0).print();
        for(int i=0;i<commasToken.size();i++){
            IOUtils.write(commasToken.get(i).toString());
            constDefNodes.get(i+1).print();
        }
        IOUtils.write(semicnToken.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.ConstDecl));
    }
}

===== ConstDefNode.java =====
package node;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class ConstDefNode {
    //常数定义 ConstDef → Ident { '[' ConstExp ']' } '=' ConstInitVal // 包含普通变量、一维
    //数组、二维数组共三种情况
    public Token identToken;
    public List<Token> leftBracketsTokens;
    public List<ConstExpNode> constExpNodes;
    public List<Token> rightBracketsTokens;
    public Token equalToken;
    public ConstInitValNode constInitValNode;
    public ConstDefNode(Token identToken, List<Token> leftBracketsTokens, List<ConstExpNode> constExpNodes, List<Token> rightBracketsTokens, Token equalToken, ConstInitValNode constInitValNode) {
        this.identToken = identToken;
        this.leftBracketsTokens = leftBracketsTokens;
        this.constExpNodes = constExpNodes;
        this.rightBracketsTokens = rightBracketsTokens;
        this.equalToken = equalToken;
        this.constInitValNode = constInitValNode;
    }
    void print(){
        IOUtils.write(identToken.toString());
        for(int i=0;i<leftBracketsTokens.size();i++){
            IOUtils.write(leftBracketsTokens.get(i).toString());
            ConstExpNode.print();
        }
    }
}

===== ConstExpNode.java =====
package node;
import frontend.Parser;
import utils.IOUtils;
public class ConstExpNode {
    // ConstExp → AddExp
    public AddExpNode addExpNode;
    public ConstExpNode(AddExpNode addExpNode) {
        this.addExpNode = addExpNode;
    }
    public void print(){
        addExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.ConstExp));
    }
}

===== ConstInitValNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class ConstInitValNode {
//    常量初值 ConstInitVal → ConstExp
//| '{' [ ConstInitVal { ',' ConstInitVal } ] '}' // 1.常表达式初值 2.一维数组初值 3.二
//维数组初值
    public ConstExpNode constExpNode;
    public Token leftBraceToken;
    public List<ConstInitValNode> constInitValNodes;
    public List<Token> commaTokens;
    public Token rightBraceToken;
    public ConstInitValNode(ConstExpNode constExpNode) {
        this.constExpNode = constExpNode;
    }
    public ConstInitValNode(Token leftBraceToken, List<ConstInitValNode> constInitValNodes, List<Token> commaTokens, Token rightBraceToken) {
        this.leftBraceToken = leftBraceToken;
        this.constInitValNodes = constInitValNodes;
        this.commaTokens = commaTokens;
        this.rightBraceToken = rightBraceToken;
    }
    void print(){
        if (constExpNode!=null){
            constExpNode.print();
        }
        else {
            IOUtils.write(leftBraceToken.toString());
            if(constInitValNodes.size()>0){
                constInitValNodes.get(0).print();
                for(int i=0;i<constInitValNodes.size();i++){
                   IOUtils.write(commaTokens.get(i).toString());
                   constInitValNodes.get(i+1).print();
                }
            }
            IOUtils.write(rightBraceToken.toString());
        }
        IOUtils.write(Parser.nodeType.get(NodeType.ConstInitVal));
    }
}

===== DeclNode.java =====
package node;
import frontend.Parser;
import utils.IOUtils;
public class DeclNode {
    // 声明 Decl → ConstDecl | VarDecl
    public ConstDeclNode constDeclNode=null;
    public VarDeclNode varDeclNode=null;
    public DeclNode(VarDeclNode varDeclNode) {
        this.varDeclNode = varDeclNode;
    }
    public DeclNode(ConstDeclNode constDeclNode) {
        this.constDeclNode = constDeclNode;
    }
    void print(){
        if(constDeclNode!=null){
            constDeclNode.print();
        }
        else varDeclNode.print();
//        IOUtils.write(Parser.nodeType.get(NodeType.Decl));
    }
}

===== EqExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.lang.reflect.Parameter;
import java.util.List;
public class EqExpNode {
    //EqExp → RelExp | EqExp ('==' | '!=') RelExp
    //EqExp -> RelExp[('==' | '!=')EqExp]
    public RelExpNode relExpNode;
    public Token operator;
    public EqExpNode eqExpNode;
    public EqExpNode(RelExpNode relExpNode, Token operator, EqExpNode eqExpNode) {
        this.relExpNode = relExpNode;
        this.operator = operator;
        this.eqExpNode = eqExpNode;
    }
    public void print(){
        relExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.EqExp));
        if(operator!=null){
            IOUtils.write(operator.toString());
            eqExpNode.print();
        }
    }
}

===== ExpNode.java =====
package node;
import frontend.Parser;
import utils.IOUtils;
public class ExpNode {
    //Exp → AddExp
    public AddExpNode addExpNode;
    public ExpNode(AddExpNode addExpNode) {
        this.addExpNode = addExpNode;
    }
    public void print(){
        addExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.Exp));
    }
}

===== FormatStringNode.java =====
package node;
public class FormatStringNode {
}

===== ForStmtNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class ForStmtNode {
    // ForStmt → LVal '=' Exp // 存在即可
    public LValNode lValNode;
    public Token assginToken;
    public ExpNode expNode;
    public ForStmtNode(LValNode lValNode, Token assginToken, ExpNode expNode) {
        this.lValNode = lValNode;
        this.assginToken = assginToken;
        this.expNode = expNode;
    }
    public void print(){
        lValNode.print();
        IOUtils.write(assginToken.toString());
        expNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.ForStmt));
    }
}

===== FuncDefNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class FuncDefNode {
    // FuncDef → FuncType Ident '(' [FuncFParams] ')' Block
    public FuncTypeNode funcTypeNode;
    public Token ident;
    public Token leftBracket;
    public FuncFParamsNode funcFParamsNode=null;
    public Token rightBracket;
    public BlockNode blockNode;
    public FuncDefNode(FuncTypeNode funcTypeNode, Token ident, Token leftBracket, FuncFParamsNode funcFParamsNode, Token rightBracket, BlockNode blockNode) {
        this.funcTypeNode = funcTypeNode;
        this.ident = ident;
        this.leftBracket = leftBracket;
        this.funcFParamsNode = funcFParamsNode;
        this.rightBracket = rightBracket;
        this.blockNode = blockNode;
    }
    public void print(){
        funcTypeNode.print();
        IOUtils.write(ident.toString());
        IOUtils.write(leftBracket.toString());
        if (funcFParamsNode!=null){
            funcFParamsNode.print();
        }
        IOUtils.write(rightBracket.toString());
        blockNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.FuncDef));
    }
}

===== FuncFParamNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class FuncFParamNode {
    // FuncFParam → BType Ident ['[' ']' { '[' ConstExp ']' }]
    public BTypeNode bTypeNode;
    public Token ident;
    public List<Token>leftSqareBrack;
    public List<Token>rightSqareBrack;
    public List<ConstExpNode> constExpNodes;
    public FuncFParamNode(BTypeNode bTypeNode, Token ident, List<Token> leftSqareBrack, List<Token> rightSqareBrack, List<ConstExpNode> constExpNodes) {
        this.bTypeNode = bTypeNode;
        this.ident = ident;
        this.leftSqareBrack = leftSqareBrack;
        this.rightSqareBrack = rightSqareBrack;
        this.constExpNodes = constExpNodes;
    }
    public void print(){
        bTypeNode.print();
        IOUtils.write(ident.toString());
        if(leftSqareBrack.size()>0){
            IOUtils.write(leftSqareBrack.get(0).toString());
            IOUtils.write(rightSqareBrack.get(0).toString());
            for(int i=0;i< constExpNodes.size();i++){
                IOUtils.write(leftSqareBrack.get(i + 1).toString());
                constExpNodes.print();
                IOUtils.write(rightSqareBrack.get(i+1).toString());
            }
        }
        IOUtils.write(Parser.nodeType.get(NodeType.FuncFParam));
    }
}

===== FuncFParamsNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class FuncFParamsNode {
    // FuncFParams → FuncFParam { ',' FuncFParam }
    public List<FuncFParamNode> funcFParamNodes;
    public List<Token> commaTokens;
    public FuncFParamsNode(List<FuncFParamNode> funcFParamNodes, List<Token> commaTokens) {
        this.funcFParamNodes = funcFParamNodes;
        this.commaTokens = commaTokens;
    }
    public void print(){
        funcFParamNodes.get(0).print();
        for(int i=0;i<commaTokens.size();i++){
            IOUtils.write(commaTokens.get(i).toString());
            funcFParamNodes.get(i+1).print();
        }
        IOUtils.write(Parser.nodeType.get(NodeType.FuncFParams));
    }
}

===== FuncRParamsNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class FuncRParamsNode {
    // FuncRParams -> Exp { ',' Exp }
    public List<ExpNode> expNodes;
    public List<Token> commas;
    public FuncRParamsNode(List<ExpNode> expNodes, List<Token> commas) {
        this.expNodes = expNodes;
        this.commas = commas;
    }
    public List<ExpNode> getExpNodes() {
        return expNodes;
    }
    public List<Token> getCommas() {
        return commas;
    }
    public void print() {
        expNodes.get(0).print();
        for (int i = 1; i < expNodes.size(); i++) {
            IOUtils.write(commas.get(i - 1).toString());
            expNodes.get(i).print();
        }
        IOUtils.write(Parser.nodeType.get(NodeType.FuncRParams));
    }
    public String getStr() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < expNodes.size(); i++) {
            sb.append(expNodes.get(i).getStr());
            if (i != expNodes.size() - 1) {
                sb.append(commas.get(i).getContent());
            }
        }
        return sb.toString();
    }
}
===== FuncTypeNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class FuncTypeNode {
    public Token token;
    public FuncTypeNode(Token token) {
        this.token = token;
    }
    void print(){
        IOUtils.write(token.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.FuncType));
    }
}

===== IdentNode.java =====
package node;
public class IdentNode {
}

===== InitValNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class InitValNode {
    // InitVal → Exp | '{' [ InitVal { ',' InitVal } ]
    public ExpNode expNode;
    public Token leftBrace;
    public List<InitValNode> initValNodes;
    public List<Token> commaTokens;
    public Token rightBrace;
    public InitValNode(ExpNode expNode) {
        this.expNode = expNode;
    }
    public InitValNode(Token leftBrace, List<InitValNode> initValNodes, List<Token> commaTokens, Token rightBrace) {
        this.leftBrace = leftBrace;
        this.initValNodes = initValNodes;
        this.commaTokens = commaTokens;
        this.rightBrace = rightBrace;
    }
    void print(){
        if(expNode!=null){
            expNode.print();
        }
        else {
            IOUtils.write(leftBrace.toString());
            if(initValNodes.size()>0){
                initValNodes.get(0).print();
                for(int i=0;i<commaTokens.size();i++){
                    IOUtils.write(commaTokens.get(i).toString());
                    initValNodes.get(i+1).print();
                }
            }
            IOUtils.write(rightBrace.toString());
        }
        IOUtils.write(Parser.nodeType.get(NodeType.InitVal));
    }
}

===== IntConstNode.java =====
package node;
public class IntConstNode {
}

===== LAndExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class LAndExpNode {
    // LAndExp → EqExp | LAndExp '&&' EqExp
    // LAndExp → EqExp['&&' LAndExp]
    public EqExpNode eqExpNode;
    public Token token;
    public LAndExpNode lAndExpNode;
    public LAndExpNode(EqExpNode eqExpNode, Token token, LAndExpNode lAndExpNode) {
        this.eqExpNode = eqExpNode;
        this.token = token;
        this.lAndExpNode = lAndExpNode;
    }
    public void print(){
        eqExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.LAndExp));
        if(lAndExpNode!=null){
            IOUtils.write(token.toString());
            lAndExpNode.print();
        }
    }
}

===== LOrExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class LOrExpNode {
    //LOrExp → LAndExp | LOrExp '||' LAndExp
    //LOrExp → LAndExp['||' LOrExp]
    public LAndExpNode lAndExpNode;
    public Token token;
    public LOrExpNode lOrExpNode;;
    public LOrExpNode(LAndExpNode lAndExpNode, Token token, LOrExpNode lOrExpNode) {
        this.lAndExpNode = lAndExpNode;
        this.token = token;
        this.lOrExpNode = lOrExpNode;
    }
    public void print(){
        lAndExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.LOrExp));
        if(lOrExpNode!=null){
            IOUtils.write(token.toString());
            lOrExpNode.print();
        }
    }
}

===== LValNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class LValNode {
    // LVal -> Ident {'[' Exp ']'}
    public Token ident;
    public List<Token> leftBrackets;
    public List<ExpNode> expNodes;
    public List<Token> rightBrackets;
    public LValNode(Token ident, List<Token> leftBrackets, List<ExpNode> expNodes, List<Token> rightBrackets) {
        this.ident = ident;
        this.leftBrackets = leftBrackets;
        this.expNodes = expNodes;
        this.rightBrackets = rightBrackets;
    }
    public Token getIdent() {
        return ident;
    }
    public List<ExpNode> getExpNodes() {
        return expNodes;
    }
    public void print() {
        IOUtils.write(ident.toString());
        for (int i = 0; i < leftBrackets.size(); i++) {
            IOUtils.write(leftBrackets.get(i).toString());
            expNodes.get(i).print();
            IOUtils.write(rightBrackets.get(i).toString());
        }
        IOUtils.write(Parser.nodeType.get(NodeType.LVal));
    }
    public String getStr() {
        StringBuilder s = new StringBuilder(ident.getContent());
        for (ExpNode expNode : expNodes) {
            s.append("[").append(expNode.getStr()).append("]");
        }
        return s.toString();
    }
}
===== MainFuncDefNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class MainFuncDefNode {
    // MainFuncDef → 'int' 'main' '(' ')' Block
    public Token intToken;
    public Token mainToken;
    public Token leftBrackToken;
    public Token rightBrackToken;
    public BlockNode blockNode;
    public MainFuncDefNode(Token intToken, Token mainToken, Token leftBrackToken, Token rightBrackToken, BlockNode blockNode) {
        this.intToken = intToken;
        this.mainToken = mainToken;
        this.leftBrackToken = leftBrackToken;
        this.rightBrackToken = rightBrackToken;
        this.blockNode = blockNode;
    }
    void print(){
        IOUtils.write(intToken.toString());
        IOUtils.write(mainToken.toString());
        IOUtils.write(leftBrackToken.toString());
        IOUtils.write(rightBrackToken.toString());
        blockNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.MainFuncDef));
    }
}

===== MulExpNode.java =====
package node;
import  frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class MulExpNode {
    //MulExp → UnaryExp | MulExp ('*' | '/' | '%') UnaryExp
    // 消除左递归
    // MulExp → UnaryExp {('*' | '/' | '%') UnaryExp}
    public List<UnaryExpNode> unaryExpNodes;
    public List<Token> operations;
    public MulExpNode(List<UnaryExpNode> unaryExpNodes,List<Token> operations) {
        this.operations = operations;
        this.unaryExpNodes = unaryExpNodes;
    }
    public void print() {
        for (int i=0;i< unaryExpNodes.size();i++) {
            unaryExpNodes.get(i).print();
            if(i<operations.size()) {
                IOUtils.write(operations.get(i).toString());
            }
        }
        IOUtils.write(Parser.nodeType.get(NodeType.MulExp));
    }
}

===== NodeType.java =====
package node;
public enum NodeType {
    CompUnit,
    Decl,
    ConstDecl,
    BType,
    ConstDef,
    ConstInitVal,
    VarDecl,
    VarDef,
    InitVal,
    FuncDef,
    MainFuncDef,
    ForStmt,
    FuncType,
    FuncFParams,
    FuncFParam,
    Block,
    BlockItem,
    Stmt,
    Exp,
    Cond,
    LVal,
    PrimaryExp,
    Number,
    UnaryExp,
    UnaryOp,
    FuncRParams,
    MulExp,
    AddExp,
    RelExp,
    EqExp,
    LAndExp,
    LOrExp,
    ConstExp,
}
===== NumberNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class NumberNode {
    // Number -> IntConst
    Token token;
    public NumberNode(Token token) {
        this.token = token;
    }
    public Token getToken() {
        return token;
    }
    public void print() {
        IOUtils.write(token.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.Number));
    }
    public String getStr() {
        return token.getContent();
    }
}
===== PrimaryExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class PrimaryExpNode {
    //PrimaryExp → '(' Exp ')' | LVal | Number
    public Token leftBracketToken;
    public ExpNode expNode;
    public Token rightBracketToken;
    public LValNode lValNode;
    public NumberNode numberNode;
    public PrimaryExpNode(NumberNode numberNode) {
        this.numberNode = numberNode;
    }
    public PrimaryExpNode(LValNode lValNode) {
        this.lValNode = lValNode;
    }
    public PrimaryExpNode(Token leftBracketToken, ExpNode expNode, Token rightBracketToken) {
        this.leftBracketToken = leftBracketToken;
        this.expNode = expNode;
        this.rightBracketToken = rightBracketToken;
    }
    public void print(){
        if (leftBracketToken!=null) {
            IOUtils.write(leftBracketToken.toString());
            expNode.print();
            IOUtils.write(rightBracketToken.toString());
        }
        else if(lValNode!=null) {
            lValNode.print();
        }
        else {
            numberNode.print();
        }
        IOUtils.write(Parser.nodeType.get(NodeType.PrimaryExp));
    }
}

===== RelExpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class RelExpNode {
    // RelExp -> AddExp | RelExp ('<' | '>' | '<=' | '>=') AddExp
    // RELExp -> AddExp RELExp'
    // RelExp' -> ('<' | '>' | '<=' | '>=') AddExp RELExp'|E
    // RELExp -> AddExp[('<' | '>' | '<=' | '>=')RELExp]
    public AddExpNode addExpNode;
    public Token operator;
    public RelExpNode relExpNode;
    public RelExpNode(AddExpNode addExpNode, Token operator, RelExpNode relExpNode) {
        this.addExpNode = addExpNode;
        this.operator = operator;
        this.relExpNode = relExpNode;
    }
    public AddExpNode getAddExpNode() {
        return addExpNode;
    }
    public Token getOperator() {
        return operator;
    }
    public RelExpNode getRelExpNode() {
        return relExpNode;
    }
    public void print() {
        addExpNode.print();
        IOUtils.write(Parser.nodeType.get(NodeType.RelExp));
        if (operator != null) {
            IOUtils.write(operator.toString());
            relExpNode.print();
        }
    }
}
===== StmtNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class StmtNode {
    // Stmt → LVal '=' Exp ';'
    // | [Exp] ';'
    // | Block
    //| 'if' '(' Cond ')' Stmt [ 'else' Stmt ] // 1.有else 2.无else
    //| 'for' '(' [ForStmt] ';' [Cond] ';' [ForStmt] ')' Stmt // 1. 无缺省 2. 缺省第一个ForStmt 3. 缺省Cond 4. 缺省第二个ForStmt
    //| 'break' ';' | 'continue' ';'
    //| 'return' [Exp] ';' // 1.有Exp 2.无Exp
    //| LVal '=' 'getint''('')'';'
    //| 'printf''('FormatString{','Exp}')'';' // 1.有Exp 2.无Exp
    public enum StmtType {
        LValAssignExp,Exp,Block,If,For,Break,Continue,Return,LValGetint,Printf
    }
    public StmtType stmtType;
    public LValNode lValNode;
    public Token assginToken;
    public ExpNode expNode;
    public List<ExpNode> expNodes;
    public Token semicolonToken;
    public BlockNode blockNode;
    public Token ifToken;
    public Token leftParenToken;
    public CondNode condNode;
    public Token rightParenToken;
    public List<StmtNode> stmtNodes;
    public Token elseToken;
    public Token forToken;
    public List<ForStmtNode> forStmtNodes;
    public List<Token> semicolonTokens;
    public Token breakToken;
    public Token continueToken;
    public Token returnToken;
    public Token getintToken;
    public Token printfToken;
    public FormatStringNode formatString;
    public Token commaToken;
    public List<Token> commaTokens;
    public StmtNode(StmtType stmtType, List<ExpNode> expNodes, Token semicolonToken, Token leftParenToken, Token rightParenToken, Token printfToken, FormatStringNode formatString, List<Token> commaTokens) {
        this.stmtType = stmtType;
        this.expNodes = expNodes;
        this.semicolonToken = semicolonToken;
        this.leftParenToken = leftParenToken;
        this.rightParenToken = rightParenToken;
        this.printfToken = printfToken;
        this.formatString = formatString;
        this.commaTokens=commaTokens;
    }
    public StmtNode(StmtType stmtType, LValNode lValNode, Token assginToken, ExpNode expNode, Token semicolonToken) {
        this.stmtType = stmtType;
        this.lValNode = lValNode;
        this.assginToken = assginToken;
        this.expNode = expNode;
        this.semicolonToken = semicolonToken;
    }
    public StmtNode(StmtType stmtType, ExpNode expNode) {
        this.stmtType = stmtType;
        this.expNode = expNode;
    }
    public StmtNode(StmtType stmtType, BlockNode blockNode) {
        this.stmtType = stmtType;
        this.blockNode = blockNode;
    }
    public StmtNode(StmtType stmtType, Token ifToken, Token leftParenToken, CondNode condNode, Token rightParenToken, List<StmtNode> stmtNodes, Token elseToken) {
        this.stmtType = stmtType;
        this.ifToken = ifToken;
        this.leftParenToken = leftParenToken;
        this.condNode = condNode;
        this.rightParenToken = rightParenToken;
        this.stmtNodes = stmtNodes;
        this.elseToken = elseToken;
    }
    public StmtNode(StmtType stmtType, Token leftParenToken, CondNode condNode, Token rightParenToken, Token forToken, List<ForStmtNode> forStmtNodes, List<Token> semicolonTokens, List<StmtNode> stmtNodes) {
        this.stmtType = stmtType;
        this.leftParenToken = leftParenToken;
        this.condNode = condNode;
        this.rightParenToken = rightParenToken;
        this.forToken = forToken;
        this.forStmtNodes = forStmtNodes;
        this.semicolonTokens = semicolonTokens;
        this.stmtNodes = stmtNodes;
    }
    public StmtNode(StmtType stmtType, Token breakToken, Token semicolonToken) {
        this.stmtType = stmtType;
        this.breakToken = breakToken;
        this.semicolonToken = semicolonToken;
    }
    public StmtNode(StmtType stmtType, ExpNode expNode, Token semicolonToken, Token returnToken) {
        this.stmtType = stmtType;
        this.expNode = expNode;
        this.semicolonToken = semicolonToken;
        this.returnToken = returnToken;
    }
    public StmtNode(StmtType stmtType, LValNode lValNode, Token assginToken, Token semicolonToken, Token leftParenToken, Token rightParenToken, Token getintToken) {
        this.stmtType = stmtType;
        this.lValNode = lValNode;
        this.assginToken = assginToken;
        this.semicolonToken = semicolonToken;
        this.leftParenToken = leftParenToken;
        this.rightParenToken = rightParenToken;
        this.getintToken = getintToken;
    }
    public void print(){
        switch (stmtType) {
            case LValAssignExp:
                printLValAssignExp();
                break;
            case Exp:
                printExp();
                break;
            case Block:
                printBlock();
                break;
            case If:
                printIf();
                break;
            case For:
                printFor();
                break;
            case Break:
                printBreak();
                break;
            case Continue:
                printContinue();
                break;
            case Return:
                printReturn();
                break;
            case LValGetint:
                printLValGetint();
                break;
            case Printf:
                printPrintf();
                break;
        }
        IOUtils.write(Parser.nodeType.get(NodeType.Stmt));
    }
    public void printLValAssignExp() {
        lValNode.print();
        IOUtils.write(assginToken.toString());
        expNode.print();
        IOUtils.write(semicolonToken.toString());
    }
    public void printExp() {
        if (expNode!=null) {
            expNode.print();
        }
        IOUtils.write(semicolonToken.toString());
    }
    public void printBlock() {
        blockNode.print();
    }
    public void printIf() {
        IOUtils.write(ifToken.toString());
        IOUtils.write(leftParenToken.toString());
        condNode.print();
        IOUtils.write(rightParenToken.toString());
        stmtNodes.get(0).print();
        if (elseToken!=null){
            IOUtils.write(elseToken.toString());
            stmtNodes.get(1).print();
        }
    }
    public void printFor() {
        IOUtils.write(forToken.toString());
        IOUtils.write(leftParenToken.toString());
        if (forStmtNodes.size()>0){
            forStmtNodes.get(0).print();
        }
        IOUtils.write(semicolonTokens.get(0).toString());
        if (condNode!=null){
            condNode.print();
        }
        IOUtils.write(semicolonTokens.get(1).toString());
        if (forStmtNodes.size()>1){
            forStmtNodes.get(1).print();
        }
        IOUtils.write(rightParenToken.toString());
        stmtNodes.get(0).print();
    }
    public void printBreak() {
        IOUtils.write(breakToken.toString());
        IOUtils.write(semicolonToken.toString());
    }
    public void printContinue() {
        IOUtils.write(continueToken.toString());
        IOUtils.write(semicolonToken.toString());
    }
    public void printReturn() {
        IOUtils.write(returnToken.toString());
        if (expNode!=null){
            expNode.print();
        }
        IOUtils.write(semicolonToken.toString());
    }
    public void printLValGetint() {
        lValNode.print();
        IOUtils.write(assginToken.toString());
        IOUtils.write(getintToken.toString());
        IOUtils.write(leftParenToken.toString());
        IOUtils.write(rightParenToken.toString());
        IOUtils.write(semicolonToken.toString());
    }
    public void printPrintf() {
        IOUtils.write(printfToken.toString());
        IOUtils.write(leftParenToken.toString());
        formatString.print();
        for(int i=0;i<commaTokens.size();i++) {
            IOUtils.write(commaTokens.get(i).toString());
            expNodes.get(i).print();
        }
        IOUtils.write(rightParenToken.toString());
        IOUtils.write(semicolonToken.toString());
    }
}

===== UnaryExpNode.java =====
package node;
import  frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class UnaryExpNode {
    // UnaryExp → PrimaryExp | Ident '(' [FuncRParams] ')'| UnaryOp UnaryExp
    // 无左递归
    // PrimaryExp → '(' Exp ')' | LVal | Number
    // LVal → Ident {'[' Exp ']'} //1.普通变量 2.一维数组 3.二维数组
    // Number → IntConst 数字
    // UnaryOp → '+' | '−' | '!' 注：'!'仅出现在条件表达式中
    // First(PrimaryExp) = {'(',Ident, Number}
    // First(Ident) = {Ident}
    // First(UnaryOp) ={ '+', '-', '!'}
    // 有回溯
    // UnaryExp → Number |'(' Exp ')' | Ident  ( '(' [FuncRParams] ')'| {'[' Exp ']'})| UnaryOp UnaryExp
    public PrimaryExpNode primaryExpNode = null;
    public Token ident = null;
    public Token leftParentToken = null;
    public FuncRParamsNode funcRParamsNode = null;
    public Token rightParentToken = null;
    public UnaryOpNode unaryOpNode = null;
    public UnaryExpNode unaryExpNode = null;
    public UnaryExpNode(PrimaryExpNode primaryExpNode) {
        this.primaryExpNode = primaryExpNode;
    }
    public UnaryExpNode(Token ident, Token leftParentToken, FuncRParamsNode funcRParamsNode, Token rightParentToken) {
        this.ident = ident;
        this.leftParentToken = leftParentToken;
        this.funcRParamsNode = funcRParamsNode;
        this.rightParentToken = rightParentToken;
    }
    public UnaryExpNode(UnaryOpNode unaryOpNode, UnaryExpNode unaryExpNode) {
        this.unaryOpNode = unaryOpNode;
        this.unaryExpNode = unaryExpNode;
    }
    void print() {
        if (primaryExpNode!=null){
            primaryExpNode.print();
        }
        else if (ident!=null){
            IOUtils.write(ident.toString());
            IOUtils.write(leftParentToken.toString());
            if (funcRParamsNode != null) {
                funcRParamsNode.print();
            }
            IOUtils.write(rightParentToken.toString());
        }
        else {
            unaryOpNode.print();
            unaryExpNode.print();
        }
        IOUtils.write(Parser.nodeType.get(NodeType.UnaryExp));
    }
}

===== UnaryOpNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
public class UnaryOpNode {
    // UnaryOp -> '+' | '−' | '!'
    Token token;
    public UnaryOpNode(Token token) {
        this.token = token;
    }
    public Token getToken() {
        return token;
    }
    public void print() {
        IOUtils.write(token.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.UnaryOp));
    }
    public String getStr() {
        return token.getContent();
    }
}
===== VarDeclNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class VarDeclNode {
//    VarDecl → BType VarDef { ',' VarDef } ';'
    public BTypeNode bTypeNode;
//    public VarDefNode varDefNode;
    public List<Token> commaTokens;
    public List<VarDefNode> varDefNodes;
    public Token semicolon;
    public VarDeclNode(BTypeNode bTypeNode, List<VarDefNode> varDefNodes,  List<Token> commaTokens, Token semicolon) {
        this.bTypeNode = bTypeNode;
//        this.varDefNode = varDefNode;
        this.commaTokens = commaTokens;
        this.varDefNodes = varDefNodes;
        this.semicolon = semicolon;
    }
    void print(){
        bTypeNode.print();
        varDefNodes.get(0).print();
        for(int i=0;i<commaTokens.size();i++){
            IOUtils.write(commaTokens.get(i).toString());
            varDefNodes.get(i+1).print();
        }
        IOUtils.write(semicolon.toString());
        IOUtils.write(Parser.nodeType.get(NodeType.VarDecl));
    }
}

===== VarDefNode.java =====
package node;
import frontend.Parser;
import token.Token;
import utils.IOUtils;
import java.util.List;
public class VarDefNode {
    // VarDef → Ident { '[' ConstExp ']' }| Ident { '[' ConstExp ']' } '=' InitVal
    public Token identToken;
    public List<Token> leftSquareBrackTokens;
    public List<ConstExpNode> constExpNodes;
    public List<Token> rightSquareBrackTokens;
    public Token assignToken=null;
    public InitValNode initValNode;
    public VarDefNode(Token identToken, List<Token> leftSquareBrackTokens, List<ConstExpNode> constExpNodes, List<Token> rightSquareBrackTokens, Token assignToken, InitValNode initValNode) {
        this.identToken = identToken;
        this.leftSquareBrackTokens = leftSquareBrackTokens;
        this.constExpNodes = constExpNodes;
        this.rightSquareBrackTokens = rightSquareBrackTokens;
        this.assignToken = assignToken;
        this.initValNode = initValNode;
    }
    public void print(){
        IOUtils.write(identToken.toString());
        for(int i=0;i<leftSquareBrackTokens.size();i++){
            IOUtils.write(leftSquareBrackTokens.get(i).toString());
            constExpNodes.get(i).print();
            IOUtils.write(rightSquareBrackTokens.get(i).toString());
        }
        if (assignToken!=null){
            IOUtils.write(assignToken.toString());
            InitValNode.print();
        }
        IOUtils.write(Parser.nodeType.get(NodeType.VarDef));
    }
}

